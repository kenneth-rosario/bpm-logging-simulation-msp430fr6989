#include "msp430.h"                     ; #define controlled include file
        
        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        
        
        
        ORG     0FFDAh                  ; Set interrupt vector for input in P1.
        DC16    PORT_1_ISR                    ; Interrupts generated by Port 1 will
                                        ; be serviced by routine which address
                                        ; is stored at address 0FFDAh of the
                                        ; Interrupt Vector Table (IVT).

        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        ORG     01C00H
state   db      0
        align   1

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment



; IO
EXTERN S1InterruptWithCallback, S2InterruptWithCallback, activateLed1, deactivateLed1, 
; Drawing
EXTERN displayLog, displayOption, displayRead
; Setup
EXTERN SetupLCD,  SetupPins, UnlockGPIO, SetupInterruptsS1, SetupInterruptsS2
; transitionHandling
EXTERN handleTransitionS1

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        
        bic.b   #00000001b, &P1OUT      ; Turn off red and green LEDs
        bic.b   #10000000b, &P9OUT
        
        call #SetupPins
        call #UnlockGPIO
        call #SetupLCD
        call #SetupInterruptsS1
        call #SetupInterruptsS2
        
        mov.b #0, state
        call #displayOption
        
        bic.b   #0xFF, &P1IFG           ; To erase a flag raised before
                                        ; activating the GIE. This help to
                                        ; avoid responding to a push on button
                                        ; previous to program start.
        
        NOP
        bis.w   #GIE,SR

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        
        
        jmp main
        
PORT_1_ISR:
    bic.b   #06h, &P1IE             ; Disable interrupt at P1.1, P1.2
    push R5
    push R6
   
    mov #state, R6
    mov #handleTransitionS1, R5
    call #S1InterruptWithCallback
    
    bic.b   #0xFF, &P1IFG
    
    pop R6
    pop R5
    bis.b   #06h, &P1IE ; Enable interrupts at P1.1, P1.2
    reti
    
// ----------------------------------------------------------------------------


final:
        JMP $                           ; jump to current location '$'
        
        NOP                             ; (endless loop)
        END