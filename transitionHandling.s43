#include "msp430.h"                     ; #define controlled include file
MODULE transitionHandling
PUBLIC handleTransitionS1, handleTransitionS2, handleTransitionTick
RSEG    CSTACK                  ; pre-declaration of segment
RSEG    CODE                    ; place program in 'CODE' segment

; Drawing needs
EXTERN displayLog, displayRead, stopTimer, startTimer, fullClear, displaybattery, divideR5ByR6, clearBatteryBars

; Transition Function for S1 Transition place current state address in R6
handleTransitionS2:
    push R7
    mov.b 0(R6), R7
    
    cmp.b #0, R7
    jeq state0S2
    cmp.b #1, R7
    jeq state1S2
    cmp.b #2, R7
    jeq state2S2
    
returnHandle:
    pop R7
    ret
    
state0S2:
    mov.b #1, 0(R6)
    call #displayRead
    jmp returnHandle

state1S2:
    mov.b #2, 0(R6)
    call #displayLog
    jmp returnHandle
    
state2S2:
    mov.b #1, 0(R6)
    call #displayRead
    jmp returnHandle


; Transition function for S2 Transitions place current state address in R6
handleTransitionS1:
    push R7
    mov.b 0(R6), R7
    cmp #1, R7
    jeq state2S1ReadingState
    
    
returnHandleS1:
    pop R7
    ret
    
state2S1ReadingState:
    call #startTimer
    call #fullClear
    
    mov #0, r12
    call #displaybattery
    
    mov #3, 0(R6)
    
    jmp returnHandleS1

; Transition function for transitions triggered by ticks place current state in r6 and tick number in r5
handleTransitionTick:
    push r8
    push r9
    push r12
    push r6 ; temporary store state
    push r5
    
    
    mov #5, r6 
    mov 0(r5), r5
    call #divideR5ByR6
    
    pop r5 ; reget ticks
    pop r6 ; reget state
  
    cmp #6, r8 ; seconds
    jge R8reached6

drawBatteries:
    mov r8, r12
    call #displaybattery
    jmp returnHandleTick
  
R8reached6:
    cmp #6, r8
    jeq drawBatteries
    
    push r5
    push r6
    
    mov r8, r5
    mov #6, r6
    call #divideR5ByR6
    
    pop r6
    pop r5
    
    mov r9, r8
    cmp #0, r8
    jeq move6ToR8
    
    cmp #1, r8
    jeq restartBattery
    
    jmp drawBatteries

move6ToR8:
    mov #6, r8
    jmp drawBatteries
    
restartBattery:
    call #clearBatteryBars
    jmp drawBatteries

returnHandleTick:
    pop r12
    pop r9
    pop r8
    ret
    
END