#include "msp430.h"                     ; #define controlled include file
MODULE transitionHandling
PUBLIC handleTransitionS1, handleTransitionS2, handleTransitionTick
RSEG    CSTACK                  ; pre-declaration of segment
RSEG    CODE                    ; place program in 'CODE' segment

; Drawing needs
EXTERN displayLog, displayRead, fullClear, displaybattery, divideR5ByR6, clearBatteryBars, ticks, beats, displayHeart, clearHeart, calculateBPM, displayBPMNumber, displayBPM, displaySave, displayOption
; Timer
EXTERN startTimerA1, stopTimer, startTimer
; Logging 
EXTERN saveLog, nextLog, logCurr

EXTERN currentBpm

; Transition Function for S1 Transition place current state address in R6
;Objetivo: Maneja las trancisiones de S2 usando el estado actual
;Precondiciones:   Debes incluir el address del state en R6
;Postcondiciones:  Ninguna
;Autor: Kenneth J. Rosario
;Fecha: 18/abril/2021    
handleTransitionS2:
    push R7
    mov.b 0(R6), R7
    
    cmp.b #0, R7
    jeq state0S2
    cmp.b #1, R7
    jeq state1S2
    cmp.b #2, R7
    jeq state2S2
    cmp.b #12, R7
    jeq state12S2ProceedToSave
    cmp.b #13, R7
    jeq state13S2DiscardBpm
    
returnHandle:
    pop R7
    ret
    
state0S2:
    mov.b #1, 0(R6)
    call #displayRead
    jmp returnHandle

state1S2:
    mov.b #2, 0(R6)
    call #displayLog
    jmp returnHandle
    
state2S2:
    mov.b #1, 0(R6)
    call #displayRead
    jmp returnHandle
    
state12S2ProceedToSave:
    mov.b #13, 0(R6)
    call #fullClear
    call #displaySave
    jmp returnHandle
    
state13S2DiscardBpm:
    mov.b #0, 0(R6)
    call #fullClear
    call #displayOption
    jmp returnHandle


;Objetivo: Maneja las trancisiones de S1 usando el estado actual
;Precondiciones:  Debes incluir el address del state en R6
;Postcondiciones:  Ninguna
;Autor: Kenneth J. Rosario
;Fecha: 18/abril/2021    
handleTransitionS1:
    push R7
    mov.b 0(R6), R7
    cmp #3, R7
    jeq state3S1InputBeat
    cmp #1, R7
    jeq state1S1ReadingState
    cmp #2, R7
    jeq state2S1ShowLogs
    cmp #5, R7
    jeq state5S1ShowLogs
    cmp #6, R7
    jeq state6S1ShowLogs
    cmp #7, R7
    jeq state7S1FinishLog
    cmp #13, R7
    jeq state13S1StoreBpm
    
returnHandleS1:
    pop R7
    ret
    
state1S1ReadingState:
    call #startTimer
    call #fullClear
    
    mov #0, r12
    call #displaybattery
    
    mov.b #3, 0(R6)
    
    jmp returnHandleS1
    
state2S1ShowLogs:
    mov.b #5, 0(R6) ; move to state 5
    call #showNextLog
    jmp returnHandleS1

state5S1ShowLogs:
    mov.b #6, 0(R6)
    call #showNextLog
    jmp returnHandleS1
    
state6S1ShowLogs:
    mov.b #7, 0(R6)
    call #showNextLog
    jmp returnHandleS1

state7S1FinishLog:
    mov.b #0, 0(R6)
    call #fullClear
    call #displayOption
    jmp returnHandleS1

state3S1InputBeat:
    call #displayHeart
    call #startTimerA1
    inc beats
    jmp returnHandleS1

state13S1StoreBpm:
    push r8
    mov currentBpm, r8
    call #saveLog
    pop r8

    mov.b #0, 0(R6)
    call #fullClear
    call #displayOption
    jmp returnHandleS1
    
    
;Objetivo: Maneja las trancisiones del timer a0 usando el estado actual
;Precondiciones:  Debes incluir el address del state en R6
;Postcondiciones:  Ninguna
;Autor: Kenneth J. Rosario
;Fecha: 18/abril/2021    
handleTransitionTick:
    push r5
    push r8
    push r9
    push r12
    
    push r6 ; temporary store state
    
    
    mov #5, r6 
    mov ticks, r5
    call #divideR5ByR6
    
    pop r6 ; reget state
    
    
    cmp #6, r8 ; seconds
    jge R8reached6
  
    mov r8, r9
    
drawBatteries:
    mov r9, r12
    call #displaybattery
    jmp returnHandleTick
  
R8reached6:
    ; check if remainder is not 0
    cmp #0, r9
    jnz returnHandleTick
    
    push r6
    
    mov r8, r5
    mov #6, r6
    call #divideR5ByR6
    
    pop r6
    

    cmp #0, r9
    jeq move6ToR8
    
    cmp #1, r9
    jeq restartBattery
    
    jmp drawBatteries

move6ToR8:
    ; Display calculated 
    push r7
    push r8
    push r10
    
    ; TASK: Fix battery bars at the end
    
    mov beats, r7
    mov ticks, r8
    
    
    call #calculateBPM
    mov r10, currentBpm
    call #displayBPMNumber
    call #displayBPM
    
    pop r10
    pop r8
    pop r7
    
    mov #6, r9
    jmp drawBatteries
    
restartBattery:
    call #clearBatteryBars
    jmp drawBatteries

returnHandleTick:
    pop r12
    pop r9
    pop r8
    pop r5
    ret
    
;Objetivo: Funcion que dibuja el proximo log
;Precondiciones: Ninguna
;Postcondiciones:  Ninguna
;Autor: Kenneth J. Rosario
;Fecha: 18/abril/2021     
showNextLog:
    call #nextLog
    call #fullClear
    push r10
    mov logCurr, r10
    call #displayBPMNumber
    call #displayBPM
    pop r10
    ret
    
END